\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename it-edit.info
@documentencoding UTF-8
@ifinfo
@*Generated by Sphinx 1.4.8.@*
@end ifinfo
@settitle it-edit Documentation
@defindex ge
@paragraphindent 0
@exampleindent 4
@finalout
@dircategory Miscellaneous
@direntry
* it-edit: (it-edit.info). One line description of project.
@end direntry

@definfoenclose strong,`,'
@definfoenclose emph,`,'
@c %**end of header

@copying
@quotation
it-edit 3.0, Apr 18, 2017

Brüggemann Eddie

Copyright @copyright{} 2015-2017, Brüggemann Eddie
@end quotation

@end copying

@titlepage
@title it-edit Documentation
@insertcopying
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top it-edit Documentation
@insertcopying
@end ifnottex

@c %**start of body
@anchor{index doc}@anchor{0}
@c it-edit documentation master file, created by
@c sphinx-quickstart on Mon Jan 16 11:18:51 2017.
@c You can adapt this file completely to your liking, but it should at least
@c contain the root `toctree` directive.

Contents:

@menu
* it-edit (Integrated Terminal Editor): it-edit Integrated Terminal Editor. 
* it-edit's menu:: 
* Editor:: 
* Terminals:: 
* Files: Files<2>. 
* Spell check:: 
* Sessions:: 
* Shortcuts table:: 
* Supported charset:: 
* Supported languages:: 
* it-edit smart widgets:: 
* Indices and tables:: 

@detailmenu
 --- The Detailed Node Listing ---

it-edit (Integrated Terminal Editor)

* Motivation for writing it-edit:: 
* Requirement of it-edit:: 
* What it-edit does for me !:: 
* it-edit spirit:: 
* Terminal integration:: 
* it-edit writing spirit:: 
* Conclusion:: 

it-edit spirit

* A programming editor:: 

it-edit's menu

* Files:: 
* Edition:: 
* Actions:: 
* Applications:: 
* View:: 
* Settings:: 
* About:: 

Editor

* Files management.: Files management. 
* Text edition functionalities.: Text edition functionalities. 
* Contextual menu from editor:: 
* Spell-check functionality:: 
* Go to line number:: 
* Find and replace:: 
* Replace in all files:: 
* Copy to clipboard:: 
* Order page:: 
* Editor usage more:: 

Terminals

* A sidebar terminals:: 
* A full-screen terminal:: 
* Top-level terminals:: 
* Contextual menu from the terminals:: 

Files

* New file:: 
* File(s) opening: File s opening. 
* Saving files:: 
* Reload file:: 
* File informations:: 

Spell check

* it-edit spell check features:: 
* Using it-edit spell check:: 
* it-edit spell check support:: 
* Thanks:: 

Sessions

* Configure your sessions recovering:: 
* The automatic session mechanism:: 

Configure your sessions recovering

* Files@comma{} documentation@comma{} applications registering;: Files documentation applications registering. 

The automatic session mechanism

* Registering;: Registering. 
* Reloading a session:: 
* Clear a session:: 

Shortcuts table

* Application shortcuts;: Application shortcuts. 
* Terminals shortcuts;: Terminals shortcuts. 

it-edit smart widgets

* GtkSmartMenuItem:: 
* GtkSmartIconButton:: 
* GtkItTerm:: 

GtkSmartMenuItem

* Constructors:: 
* Getters:: 

GtkSmartIconButton

* Constructors: Constructors<2>. 
* Getters: Getters<2>. 

@end detailmenu
@end menu

@node it-edit Integrated Terminal Editor,it-edit's menu,Top,Top
@anchor{it-edit_presentation it-edit-integrated-terminal-editor}@anchor{1}@anchor{it-edit_presentation welcome-to-it-edit-s-documentation}@anchor{2}@anchor{it-edit_presentation doc}@anchor{3}
@chapter it-edit (Integrated Terminal Editor)


@*program: 
it-edit


@*version: 
3.0


@*author: 
Brüggemann Eddie


@*contact: 
<@email{mrcyberfighter@@gmail.com}>


@*license: 
GPLv3


@*website: 
<@indicateurl{http://www.open-source-projects.net/it-edit/it-edit}>


@*release: 
Apr 18, 2017


@menu
* Motivation for writing it-edit:: 
* Requirement of it-edit:: 
* What it-edit does for me !:: 
* it-edit spirit:: 
* Terminal integration:: 
* it-edit writing spirit:: 
* Conclusion:: 

@end menu

@node Motivation for writing it-edit,Requirement of it-edit,,it-edit Integrated Terminal Editor
@anchor{it-edit_presentation motivation-for-writing-it-edit}@anchor{4}
@section Motivation for writing it-edit


I think they are 2 sort of programmers in their habits of writing programs:

@quotation


@itemize *

@item 
They which use an @abbr{I.D.E,Integrated Development Environment} with full integrated functionalities, and master it to respond to most of their requirements.

@item 
They which use an text editor to write their programs and a terminal to compile, debug or launch them and some other tools separately.
@end itemize
@end quotation

Because I'm an programmer from the second category and because i remark that i often use additional tools than the editor and the terminal.

I decide to write my own text editor program which provide me all the functionalities that i need to get a development environment fully adapt to my requirement.

So in fact @code{it-edit} is more than a basic programming text editor, but a powerful tool which I hope you will agree the concept.

@cartouche
@quotation Note 
In fact in conjunction with my project generator mk-project@footnote{http://www.open-source-projects.net/mk-project/mk-project} which generate me a big @strong{do all} @code{Makefile}.

I enjoy using it-edit every time !

Even when I only to type few targets like (make, make exec, make ddebug, make gdb,...) @code{it-edit} is useful for all task to do in a terminal.

All this with an accompanied editor.

@*note: 
By the way mk-project@footnote{http://www.open-source-projects.net/mk-project/mk-project} can be useful for every @code{vim} or @abbr{T.U.I,Terminal User Interface} editor user.

@end quotation
@end cartouche

@node Requirement of it-edit,What it-edit does for me !,Motivation for writing it-edit,it-edit Integrated Terminal Editor
@anchor{it-edit_presentation requirement-of-it-edit}@anchor{5}
@section Requirement of @code{it-edit}


@code{it-edit} requires


@itemize +

@item 
gtk-3 as @abbr{G.U.I,Graphical User Interface}

@item 
gtksourceview-3.

@item 
vte-2.91 for the virtual terminals emulation as a gtk-3 widget.

@item 
Optionally gspell-1 as @ref{6,,spell checker}.
@end itemize

@*warning: 
You must install the development packages of all required library because it will be compiled and installed on the target host.


@node What it-edit does for me !,it-edit spirit,Requirement of it-edit,it-edit Integrated Terminal Editor
@anchor{it-edit_presentation what-it-edit-does-for-me}@anchor{7}
@section What @code{it-edit} does for me !


@code{it-edit} consist of a basic programming text editor with all basic functionalities with

intelligently integrated terminals the best positioned so that they are @code{easy to reach} into the main interface of the program.

With many others practices functionalities.

@c Make it better:  Easy access to documentation of any sort and easy launching GUI applications for the purpose you need.

---

@code{it-edit} integrated terminals in the best way I have thought for me.

A side bar terminal which you can add and remove items, a big full-screen terminal, the same divided into 4 terminals and as many top-level terminals as you want.

---

@code{it-edit} provide an easy file access...

In fact it was thought for registering @strong{HTML} documentation and so accessing it @strong{easily}.


@display
@w{ }
@end display



But you can register your winner song if you want when you have terminate all your assertions well,

to celebrate your victory @strong{!}

@code{it-edit} will open the registered file with the default program for it if any available.


@display
@w{ }
@end display



@quotation

Saving and restoring your file(s) list.

@example
$ cp /usr/local/share/it-edit/Files_handler/Files_handler.conf $HOME
@end example

To restore your file(s) list after upgrade per example.

@example
$ cp $HOME/Files_handler.conf /usr/local/share/it-edit/Files_handler/Files_handler.conf
@end example
@end quotation

---

You can launch graphical applications with @code{it-edit} very easily:


@itemize +

@item 
At first it-edit will check your system, at first start, for some predefined applications and register it into their related category.

@*note: 
You can change the application(s), if found or not, as you want.


@item 
Then you can choose to register and delete the applications you want, into the category @code{Other}.
@end itemize

---

The version @strong{3}.**0** of @code{it-edit} embedded a configurable spell checker utility which you can use to write documentations

reachable as


@itemize +

@item 
@strong{in-line spell-check} (@emph{the misspelled words are underline})
@end itemize

or


@itemize +

@item 
through launching a @strong{dialog spell-check} window which permit you to correct all misspelled words of the current document.
@end itemize

@c OLD: Which consist of a terminal integrated text-editor with which you can access all you require directly from the editor: documentation, GUI applications, ...

@c Editor description:

@c * syntax highlight for many languages.

@c * Cut, Copy, Paste functionalities available from severals places in the main interface:

@c * From the menu items.

@c * From a button into the button bar.

@c * From the contextual menu

@node it-edit spirit,Terminal integration,What it-edit does for me !,it-edit Integrated Terminal Editor
@anchor{it-edit_presentation it-edit-spirit}@anchor{8}
@section @code{it-edit} spirit


@code{it-edit} offers:

@menu
* A programming editor:: 

@end menu

@node A programming editor,,,it-edit spirit
@anchor{it-edit_presentation a-programming-editor}@anchor{9}
@subsection A programming editor


A text-editor without favoring any language.

With all the basic text editor functionalities and overall useful @ref{a,,shortcuts} which you didn't have to know all.

And some unusual like @strong{duplicate text} or @strong{copy to clipboard} the current edited absolute @strong{file-path} (@code{Ctrl + Shift + Y}).

You will be able to open, open a recent, save, save as, save all, file(s).

Or reload your last session file(s) as documentation and launched applications.

@code{it-edit} provides some informations like:


@itemize +

@item 
Line

@item 
Column

@item 
Total lines

@item 
Total characters

@item 
The filename (hold the mouse over  the notebook tab, you will know the absolute file-path).
@end itemize

By opening the file informations you will get more informations and can do some basic functions on (and strictly over) the file on disk (@strong{not} the current edited buffer):


@itemize +

@item 
The file base-name.

@item 
Language, Mime-type and Extension.

@item 
Lines, Words and Chars count.

@item 
MD5, SHA1, SHA256 and SHA512 checksum in hexadecimal notation.
@end itemize

You will be able to see and to modify:


@itemize +

@item 
The file permissions.
@end itemize

@*warning: 
By saving the @code{configured mask} will overwrite your changes.



@itemize +

@item 
The last


@itemize +

@item 
Access time

@item 
Modification time (can be useful with make and system clock disturbing).

@item 
Last status change time (this one isn't modifiable).
@end itemize

@item 
Rename, Copy, Compress (@emph{using the gzip algorithm}), Move file.
@end itemize

@node Terminal integration,it-edit writing spirit,it-edit spirit,it-edit Integrated Terminal Editor
@anchor{it-edit_presentation terminal-integration}@anchor{b}
@section Terminal integration


@code{it-edit} provides the best terminals integration for everyone:


@itemize +

@item 
The @strong{sidebar terminals} can be useful by editing and requiring immediately a terminal in the same window.

@item 
The @strong{single "Big Terminal"} can be useful if you need space: you can mask the button bar and made it full-screen.

@item 
The @strong{4 divided "Big Terminal"} can be useful if you need severals terminals on the screen.

@item 
The @strong{top level terminal} is re-sizable and in a separate window.
@end itemize

@*note: 
It's recommended to use @code{it-edit} with a @code{Makefile} (easy self-build or not) for compiled languages, else enjoy the terminals for launching your scripts and commands.


@code{make makes the life easier !}

All this terminals have a good contextual menu and I had problems to add some items, as @code{sync current directory} in every terminal, and so on.

@node it-edit writing spirit,Conclusion,Terminal integration,it-edit Integrated Terminal Editor
@anchor{it-edit_presentation it-edit-writing-spirit}@anchor{c}
@section @code{it-edit} writing spirit


@code{it-edit} is written in C (-std=c99) using gtk-3 and related libraries.

@code{it-edit} writing style takes cares of:

@quotation


@itemize *

@item 
structure variables order: so that no unneeded padding is added from the compiler.

@item 
cache optimizing: so that we get the best cache-hits we can.
@end itemize
@end quotation

@code{it-edit} make strong usage of the gtk-3 types.

@code{it-edit} provide an optional spell checker useful for writing documentation or simply comments.

@code{it-edit} make usage of @code{/** **/} comments so for commenting out a code section, by hacking it-edit, use the preprocessor: @code{#if 0 ... #endif}.

@*note: 
The spirit of @code{it-edit} says that you have to do a thing a single time then it's automatize.


@node Conclusion,,it-edit writing spirit,it-edit Integrated Terminal Editor
@anchor{it-edit_presentation conclusion}@anchor{d}
@section Conclusion


Control all your system with @code{it-edit} and show us that you can dialog with it through the best medium: the terminal.

@node it-edit's menu,Editor,it-edit Integrated Terminal Editor,Top
@anchor{Menu it-edit-s-menu}@anchor{e}@anchor{Menu doc}@anchor{f}
@chapter @code{it-edit}'s menu


@menu
* Files:: 
* Edition:: 
* Actions:: 
* Applications:: 
* View:: 
* Settings:: 
* About:: 

@end menu

@node Files,Edition,,it-edit's menu
@anchor{Menu files}@anchor{10}
@section Files



@itemize +

@item 
‣  New file (@code{Ctrl + n})

@item 
‣  Open file (@code{Ctrl + o})

@item 
‣  Recent file(s)

@emph{... List of recent files}

@item 
‣  Save file (@code{Ctrl + s})

@item 
‣  Save file as

@item 
‣  Save all file(s) (@code{Ctrl +  Shift + N})

@item 
‣  Close file (@code{Ctrl +  Alt + c})

@item 
‣  Close all files (@code{Ctrl +  Shift + C})

@item 
‣  Reload :ref:`session <session>


@itemize +

@item 
‣  Reload entire session

@item 
‣  Reload last file(s)

@item 
‣  Reload last documentation

@item 
‣  Reload last application(s)

@item 
‣  Clear session
@end itemize

@item 
‣  Reload current file (@code{Ctrl +  r})

@item 
‣  File informations (@code{Ctrl +  i})

@item 
‣  Quit (@code{Ctrl +  q})
@end itemize

@node Edition,Actions,Files,it-edit's menu
@anchor{Menu edition}@anchor{11}
@section Edition



@itemize +

@item 
‣  Undo (@code{Ctrl +  z})

@item 
‣  Redo (@code{Ctrl +  Shift + Z})

@item 
‣  Find text (@code{Ctrl +  f})

@item 
‣  Find all (@code{Ctrl +  Shift + F})

@item 
‣  Find previous (@code{Ctrl + -})

@item 
‣  Find next (@code{Ctrl + +})

@item 
‣  Replace text (@code{Ctrl +  Enter (KP)})

@item 
‣  Replace all  (@code{Ctrl +  Shift + Enter (KP)})

@item 
‣  Replace all in all files  (@code{Ctrl +  Shift + R)})

@item 
‣  Go to line number  (@code{Ctrl +  g})

@item 
‣  Cut  (@code{Ctrl +  x})

@item 
‣  Copy (@code{Ctrl +  c})

@item 
‣  Paste (@code{Ctrl +  v})

@item 
‣  Duplicate text (@code{Ctrl + d})

@item 
‣  Use space instead of tabs (@code{Ctrl +  p})

@item 
‣  In-line spell check (@code{Ctrl +  w})
@end itemize

@node Actions,Applications,Edition,it-edit's menu
@anchor{Menu actions}@anchor{12}
@section Actions



@itemize +

@item 
‣  Execute command (@code{Ctrl +  e})

@item 
‣  Order pages (@code{Ctrl +  Alt + y})

@item 
‣  Copy file-path to clipboard (@code{Ctrl +  y})

@item 
‣  Copy folder-path to clipboard (@code{Ctrl +  Shift + Y})

@item 
‣  Sidebar terminals add tab (@code{Ctrl +  Shift + T})

@item 
‣  Big terminals(s) switch (@code{Ctrl +  Shift + B})

@item 
‣  File(s) handler (@code{Ctrl +  h})

@item 
‣  Application launcher (@code{Ctrl +  a})

@item 
‣  Spell check dialog (@code{Ctrl +  Shift + W})
@end itemize

@node Applications,View,Actions,it-edit's menu
@anchor{Menu applications}@anchor{13}
@section Applications



@itemize +

@item 
‣  Programming


@itemize +

@item 
‣  Diff G.U.I (Graphical User Interface) tool

@item 
‣  Debugger G.U.I (Graphical User Interface) tool

@item 
‣  Python smart interpreter G.U.I (Graphical User Interface) tool

@item 
‣  G.U.I (Graphical User Interface) designer tool

@item 
‣  devhelp
@end itemize

@item 
‣  Utilities
@end itemize

@quotation


@itemize +

@item 
‣  Calculator

@item 
‣  Color picker

@item 
‣  Dictionary

@item 
‣  File manager

@item 
‣  Browser
@end itemize
@end quotation


@itemize +

@item 
‣  User defined applications
@end itemize

@node View,Settings,Applications,it-edit's menu
@anchor{Menu view}@anchor{14}
@section View



@itemize +

@item 
‣  Big terminal show

@item 
‣  Sidebar terminals show

@item 
‣  Button bar show

@item 
‣  Full screen
@end itemize

@node Settings,About,View,it-edit's menu
@anchor{Menu settings}@anchor{15}
@section Settings



@itemize +

@item 
‣  Syntax highlight

@item 
‣  Editor scheme

@item 
‣  Configure spell check language

@item 
‣  Configure program
@end itemize

@node About,,Settings,it-edit's menu
@anchor{Menu about}@anchor{16}
@section About



@itemize +

@item 
‣  Uptime

@item 
‣  Notice

@item 
‣  License

@item 
‣  About
@end itemize

@node Editor,Terminals,it-edit's menu,Top
@anchor{Editor editor}@anchor{17}@anchor{Editor doc}@anchor{18}
@chapter Editor


The editor has as functionalities :

@menu
* Files management.: Files management. 
* Text edition functionalities.: Text edition functionalities. 
* Contextual menu from editor:: 
* Spell-check functionality:: 
* Go to line number:: 
* Find and replace:: 
* Replace in all files:: 
* Copy to clipboard:: 
* Order page:: 
* Editor usage more:: 

@end menu

@node Files management,Text edition functionalities,,Editor
@anchor{Editor files-management}@anchor{19}
@section Files management.



@itemize +

@item 
New file.

@item 
Open file(s) or a recent file.

@item 
Save file(s).

@item 
Close file.

@item 
Close all file(s).

@item 
File informations.

@item 
Reload file (from disk).
@end itemize

@node Text edition functionalities,Contextual menu from editor,Files management,Editor
@anchor{Editor text-edition-functionalities}@anchor{1a}
@section Text edition functionalities.



@itemize +

@item 
Undo/Redo.

@item 
Search and Replace.

@item 
Go to line number.

@item 
Cut/Copy/Paste.

@item 
Duplicate text.

@item 
Use spaces instead of tabs.

@item 
Enable/Disable in-line spell-check.
@end itemize

@node Contextual menu from editor,Spell-check functionality,Text edition functionalities,Editor
@anchor{Editor contextual-menu-from-editor}@anchor{1b}
@section Contextual menu from editor



@itemize +

@item 
Undo

@item 
Redo
@end itemize

---


@itemize +

@item 
Cut

@item 
Copy

@item 
Paste

@item 
Erase
@end itemize

---


@itemize +

@item 
Select all

@item 
Change case


@itemize +

@item 
All to uppercase

@item 
All to lowercase

@item 
Invert case

@item 
First letter uppercase
@end itemize
@end itemize

@*note: 
If you're using the @code{In-line spell check} functionality an item with a @emph{sub-menu} of @strong{suggestions} is added to the @strong{contextual menu} of the editor.


@node Spell-check functionality,Go to line number,Contextual menu from editor,Editor
@anchor{Editor spell-check-functionality}@anchor{1c}
@section Spell-check functionality



@itemize +

@item 
In-line spell-check (@code{Ctrl + w}) : the misspelled words are highlight.

@item 
Spell-check dialog (@code{Ctrl + Maj + w}) : scan all the text buffer for misspelled words, with a dialog window for correct them or not.
@end itemize

@*warning: 
Install the optional @code{gspell-1} @code{-dev} or @code{-devel} package, before installing @code{it-edit}.


@node Go to line number,Find and replace,Spell-check functionality,Editor
@anchor{Editor go-to-line-number}@anchor{1d}
@section Go to line number



@itemize +

@item 
Use the menu item, the button or the shortcut: @code{Ctrl + g}.

A window will appear asking you for a valid line number.

Enter a valid line number and press @code{Enter} or the Apply button to move the editor to the wanted line,

which will be highlight according to the current scheme.

@*note: 
This is very useful to go to a specific line.

@end itemize

@node Find and replace,Replace in all files,Go to line number,Editor
@anchor{Editor find-and-replace}@anchor{1e}
@section Find and replace



@itemize +

@item 
You can @emph{show} | @emph{hide} the @code{Find and replace} bar by using the toggle button.

The @code{Search and Replace} bar has following functionalities:


@itemize +

@item 
@strong{Search} button: this will highlight all the matching occurrences from the search term and moving the editor to the first occurrence position.

@item 
@strong{Next} button: highlight the next matching occurrence from the search term.

Pressing @strong{Enter} when the search entry field has the focus has the same effect.

The search will start at selection or at the cursor position.

If you select some text with the mouse and using the shortcut @code{Ctrl + f}.

The search field will toggle on if not visible and will contains the selected text as search term.

@*note: 
You can use the shortcut @code{Ctrl + + (KP)} to activate the @strong{Next} functionality.


@item 
@strong{Previous} button: highlight the previous matching occurrence from the search term.

The search will start at selection or at the cursor position.

If you select some text with the mouse and use the shortcut @code{Ctrl + f}.

The search field will toggle on if not visible and will contains the selected text as search term.

@*note: 
You can use the shortcut @code{Ctrl + - (KP)} to activate the @strong{Previous} functionality.


@item 
@strong{Replace} button: replace the current matching occurrence, which is highlight, with the content of the replace field.

@*note: 
You can use the shortcut @code{Ctrl + Enter (KP)}: instead of the button.


@item 
@strong{Replace all} button: replace all the matching occurrence in the current file.

@*note: 
You can use the shortcut @code{Ctrl + Shift + Enter (KP)} instead of the button.


@item 
@strong{Mode}: You can select how your search term(s) will be interpreted.


@itemize +

@item 
@strong{Raw text}: all search terms matching.

@item 
@strong{Word boundary}: The search term must be a complete word, not a part but an variable with separators like underscores or points will work too.

@item 
@strong{Regular expression}: @emph{Perl} compatible regular expression (@strong{REGEX}).
@end itemize

@*note: 
For @strong{REGEX} read the @strong{GLib Regex} documentation which is contains into the @code{gtk-doc} directory.


@item 
@strong{Close} button: hide the search and replace bar and clear the highlight.
@end itemize
@end itemize

@*note: 
If you select some text with the mouse and use the @code{Ctrl + f} shortcut, then:


@itemize +

@item 
The search and replace bar will be show.

@item 
The search field will be filled with your selection.
@end itemize

@*note: 
The search will begin at your selection position if you hit the @strong{Next} or @strong{Previous} button.



@cartouche
@quotation Note 
@strong{The search terms history:}

Every search term you make a search for will be register into the history.


@itemize +

@item 
You can use the @code{Up} key to start the history search from the beginning.

@item 
You can use the @code{Down} key to start the history search from the end.
@end itemize

It will flow through the search terms history but not wrap around, simply end at the other end.
@end quotation
@end cartouche

@node Replace in all files,Copy to clipboard,Find and replace,Editor
@anchor{Editor replace-in-all-files}@anchor{1f}
@section Replace in all files


You can use the button, menu item or shortcut (@code{Ctrl + Shift + R}),

to replace all occurrence(s) from a pattern according the settings:


@itemize +

@item 
Case sensitive

@item 
Mode


@itemize +

@item 
Raw text

@item 
Word boundary

@item 
REGEX
@end itemize
@end itemize

Which are all settable, like the pattern and the replacement text, into the appearing top-level window.

@node Copy to clipboard,Order page,Replace in all files,Editor
@anchor{Editor copy-to-clipboard}@anchor{20}
@section Copy to clipboard


You can copy to clipboard either :


@itemize +

@item 
The current absolute file-path (@code{Ctrl + y}).

@item 
The current absolute folder-path (@code{Ctrl + Shift + Y}).
@end itemize

@node Order page,Editor usage more,Copy to clipboard,Editor
@anchor{Editor order-page}@anchor{21}
@section Order page


You can use menu item or the shortcut (@code{Ctrl + Shift + O}) to reorder all the pages lexicographically.

@node Editor usage more,,Order page,Editor
@anchor{Editor editor-usage-more}@anchor{22}
@section Editor usage more



@itemize +

@item 
You can use the page up and page down to scroll faster than with the arrows.

@item 
You can use the key @code{Insert} for changing the form of the cursor.

@item 
You can use the combination @code{Control +  Left | Right} to move to previous | next sequence of characters.

@item 
You can use the Erase key to erase the current selection.

@item 
You can use the shortcut @code{Ctrl + Backspace} to remove an entire characters sequence.

@item 
You can use the shortcut @code{Ctrl + Start} and @code{Ctrl + End} to move the cursor to the beginning or end of the document.

@item 
The search-replace shortcuts are clever set on the keypad:


@itemize +

@item 
Find next : @code{Ctrl + + (KP)}.

@item 
Find previous : @code{Ctrl + - (KP)}.

@item 
Replace : @code{Ctrl + Enter (KP)}.

@item 
Replace all : @code{Ctrl + Shift + Enter (KP)}.
@end itemize

For a better and faster search and replace feature.

@item 
By all top-level windows you can use the shortcuts:


@itemize +

@item 
@code{Escape} to close the window.

@item 
@code{Enter} to confirm.
@end itemize
@end itemize

@node Terminals,Files<2>,Editor,Top
@anchor{Terminals terminals}@anchor{23}@anchor{Terminals doc}@anchor{24}
@chapter Terminals


@code{it-edit} provides:

@menu
* A sidebar terminals:: 
* A full-screen terminal:: 
* Top-level terminals:: 
* Contextual menu from the terminals:: 

@end menu

@node A sidebar terminals,A full-screen terminal,,Terminals
@anchor{Terminals a-sidebar-terminals}@anchor{25}
@section A sidebar terminals


@code{it-edit} provides @strong{terminals in the same window as the editor}, as a sidebar, which can easily @strong{shown}, @strong{hidden} and @strong{pull} as you want.

You can @strong{add} and @strong{remove} as many terminals as you want to the sidebar.

@node A full-screen terminal,Top-level terminals,A sidebar terminals,Terminals
@anchor{Terminals a-full-screen-terminal}@anchor{26}
@section A full-screen terminal


@code{it-edit} provides a @strong{big terminal} occupying the full interface, @strong{dividable} into @strong{4 re-sizable terminals}, to which you can @strong{easy toggle} from the main window.

@node Top-level terminals,Contextual menu from the terminals,A full-screen terminal,Terminals
@anchor{Terminals top-level-terminals}@anchor{27}
@section Top-level terminals


@code{it-edit} provides a @strong{top-level terminal window} (so it can be @strong{resize}, @strong{minimize}, @strong{maximize} and @strong{closed}),

At first you will be prompt to enter a command.

After the execution of the command the top-level terminal is yours and can continue to enter commands.

@node Contextual menu from the terminals,,Top-level terminals,Terminals
@anchor{Terminals contextual-menu-from-the-terminals}@anchor{28}
@section Contextual menu from the terminals



@itemize +

@item 
Copy from terminal

@item 
Paste to terminal
@end itemize

---


@itemize +

@item 
Decrease font

@item 
Increase font
@end itemize

---


@itemize +

@item 
Reset terminals
@end itemize

@cartouche
@quotation Note 
By the sidebar terminals the items:


@itemize +

@item 
Open new tab

@item 
Close tab
@end itemize

Are added to the contextual menu.
@end quotation
@end cartouche

@node Files<2>,Spell check,Terminals,Top
@anchor{Files id1}@anchor{29}@anchor{Files files}@anchor{2a}@anchor{Files doc}@anchor{2b}
@chapter Files


@menu
* New file:: 
* File(s) opening: File s opening. 
* Saving files:: 
* Reload file:: 
* File informations:: 

@end menu

@node New file,File s opening,,Files<2>
@anchor{Files new-file}@anchor{2c}
@section New file


You can open a New file, this will create a random named @code{New_XXXXXX} file into your @strong{TEMPDIR} folder, and erase it immediately but the file-path is kept.

You will surely write inside the new create buffer and surely save it after (surely not into the @strong{TEMPDIR} folder).

Use the menu item Files ‣ New file or the shortcut @code{Ctrl + N} to create a new buffer as describe above.

@node File s opening,Saving files,New file,Files<2>
@anchor{Files file-s-opening}@anchor{2d}
@section File(s) opening


They are several ways for opening file(s) into @code{it-edit}:


@itemize +

@item 
By using the open file(s)


@itemize +

@item 
The menu item: Files ‣ Open file.

@item 
The button.

@item 
The shortcut @code{Ctrl + O}.
@end itemize
@end itemize

This will present you a file selector to open the wanted file(s).

@cartouche
@quotation Note 
The current tab influate the file-selector behaviour:


@itemize +

@item 
The active editor page will influence into which folder the file-selector gets open.

Because the file-selector will be launched into the folder from the current edited file location.

@quotation

You can held the mouse over the tab (which content the current filename) to sea the absolute file path in a tool-tip.

The same mechanic is by placing the mouse over the filename into the bottom bar.
@end quotation

@item 
You can configure to get the current edited file selected (highlighted into the file-selector) into the editor or not.

@*note: 
This can be practice if per example you want to open the header file from a source file or inversed.

@end itemize
@end quotation
@end cartouche


@itemize +

@item 
By using the recent file menu-item to open a recent used file.
@end itemize

@c Make a link to the session notice page.


@itemize +

@item 
You can open the last registered files, most often the files opened in the last session, by using the the menu item Reload Session ‣ Reload last files.

This will open automatically all the last registered files.

@*note: 
This can be practice if you work on a single project during some time.

@end itemize

@node Saving files,Reload file,File s opening,Files<2>
@anchor{Files saving-files}@anchor{2e}
@section Saving files


They are several ways of saving files into @code{it-edit}:


@enumerate 

@item 
You can save the current file simply using:
@end enumerate

@quotation


@itemize +

@item 
The menu item: Files ‣ Save file.

@item 
The button.

@item 
The shortcut @code{Ctrl + S}
@end itemize

This will save the file at is current location.
@end quotation


@enumerate 2

@item 
You can save a "@code{New}" file or the edited file into another location by using:
@end enumerate

@quotation


@itemize +

@item 
The menu item: Files ‣ Save file as.

@item 
The button.
@end itemize

@*warning: 
They is no shortcut for this purpose, but if you save (Save file @code{Ctrl + S}) simply a "@code{New}" file this will act as a Save file as.

@end quotation


@enumerate 3

@item 
You can save all the open files using:
@end enumerate

@quotation


@itemize +

@item 
The menu item: Files ‣ Save all files.

@item 
The button.

@item 
The shortcut @code{Ctrl + Shift + S}
@end itemize

This will save all the unsaved files at their current location.
@end quotation

@cartouche
@quotation Note 
You can distinguish if a file is currently save or modified by looking at the @strong{name} @emph{in the tab}:

if their is an @strong{asterisk} '@code{*}' @emph{before} the @strong{file name} this mean that the @emph{file} is currently @strong{not saved} on the @emph{disk}.
@end quotation
@end cartouche

@*note: 
If enabled @code{it-edit} will remove all the trailing spaces from the document after having save it.


@node Reload file,File informations,Saving files,Files<2>
@anchor{Files reload-file}@anchor{2f}
@section Reload file


You can reload a file from disk with @code{it-edit} by using:


@itemize +

@item 
The menu item: Files ‣ Reload current file.

@item 
The shortcut @code{Ctrl + R}.
@end itemize

@*note: 
This can be practice if per example you have redirect you compilation process to a file for debugging compilation errors.


@node File informations,,Reload file,Files<2>
@anchor{Files file-informations}@anchor{30}
@section File informations


You can get and change files informations by using the menu item Files ‣ File informations @code{Ctrl + I}.

This will display a @strong{top-level window} presenting following @strong{informations} and @strong{action} to @emph{process} on the @emph{file}:


@enumerate 

@item 
A frame named: @code{Main informations} will display:
@end enumerate

@quotation


@itemize +

@item 
A nice image from the @strong{mime type} of your current edited file.

@item 
The programming @strong{language} of the file.

@item 
The @strong{mime type} verbatim.

@item 
The file @strong{extension}.
@end itemize
@end quotation


@enumerate 2

@item 
A frame named: @code{Mode} will display a file @strong{permissions} table like this:
@end enumerate

@quotation

@example
+---+---+---+---+
|   | R | W | X |
+---+---+---+---+
| U | * | * |   |
+---+---+---+---+
| G | * | * |   |
+---+---+---+---+
| O | * |   |   |
+---+---+---+---+

U -> User.      R -> Read.

G -> Group.     W -> Write.

O -> Others.    X -> Execute.
@end example

The cells of the table contains @strong{check-boxes} representing the current @strong{permissions} of the file.

By simply (un)checking the @strong{check-boxes} you change the @strong{permissions} of the file on disk.

@c Put a link to the configuration Notice page.

@*warning: 
By saving your file you will set the permissions according to your configuration into @code{it-edit} for files saving.

@end quotation


@enumerate 3

@item 
A frame named: @code{File counts} display some few statistics of the file:
@end enumerate

@quotation


@itemize +

@item 
@emph{The number} of @strong{lines}.

@item 
@emph{The number} of @strong{characters}.

@item 
@emph{The number} of @strong{words}.
@end itemize

Of the file on the disk.

@*note: 
@code{it-edit} use the program @code{wc} to gets this informations.


@*warning: 
The number of line(s) and character(s) into your current edited buffer is visible into the bottom bar.

@end quotation


@enumerate 4

@item 
A frame named: @code{Timestamps} display the:
@end enumerate

@quotation


@itemize +

@item 
@strong{Last status change} @emph{date and time}.

@item 
@strong{Last access} @emph{date and time}.

@item 
@strong{Last modification} @emph{date and time}.
@end itemize

Of the file on the disk.

Near of every information is a button named @code{Modify} which permit you to change the timestamps.

Which will present you a @strong{calendar} for the date

and @strong{3} @emph{spin buttons}:


@itemize +

@item 
@strong{Hours}

@item 
@strong{Minutes}

@item 
@strong{Seconds}
@end itemize

Which permit you to change the timestamps easily.

@*note: 
This can be useful per example if you have change your system clock and you use the @code{make} tool,...

@end quotation


@enumerate 5

@item 
A frame named: @code{Checksum} will display the:
@end enumerate

@quotation


@itemize +

@item 
@strong{MD 5} hash.

@item 
@strong{SHA 1} hash.

@item 
@strong{SHA 256} hash.

@item 
@strong{SHA 512} hash.
@end itemize

of your file.

@*note: 
The @emph{checksums} are displayed into @strong{hexadecimal} values.

@end quotation


@enumerate 6

@item 
A frame named: @code{File actions} will present you:
@end enumerate

@quotation

The file name and 4 buttons, named:


@itemize +

@item 
Rename file

@item 
Copy file

@item 
Compress file (using gzip)

@item 
Move file.
@end itemize

The functionalities of this buttons are clear as their name.
@end quotation

@node Spell check,Sessions,Files<2>,Top
@anchor{Spell-check spell-check}@anchor{6}@anchor{Spell-check id1}@anchor{31}@anchor{Spell-check doc}@anchor{32}
@chapter Spell check


@menu
* it-edit spell check features:: 
* Using it-edit spell check:: 
* it-edit spell check support:: 
* Thanks:: 

@end menu

@node it-edit spell check features,Using it-edit spell check,,Spell check
@anchor{Spell-check it-edit-spell-check-features}@anchor{33}
@section @code{it-edit} spell check features


@quotation

@code{it-edit} provide 2 different spell check methods:


@itemize +

@item 
In-line spell check:

The in-line spell check mechanism is to underline the misspelled words and to provides corrections

by setting the cursor over the misspell word and opening the contextual menu from @code{it-edit}.

The contextual menu include then a Spelling suggestion menu item, from which you can choose

to correct the misspelled word: the word is automatically replaced with the word you've chosen.

@item 
Spell check dialog:

@code{it-edit} provide a dialog window which will check the entire current edited file buffer.
@end itemize
@end quotation

@node Using it-edit spell check,it-edit spell check support,it-edit spell check features,Spell check
@anchor{Spell-check using-it-edit-spell-check}@anchor{34}
@section Using @code{it-edit} spell check


@quotation

You can enable or disable the in-line spell check by using:


@itemize +

@item 
The menu item: Edition ‣ Inline spell check.

@item 
The button.

@item 
The shortcut: @code{Ctrl + W}.
@end itemize

You can display the spell check dialog window using the:


@itemize +

@item 
The menu item: Actions ‣ Spell check dialog.

@item 
The button.

@item 
The shortcut: @code{Ctrl + Shift + W}.
@end itemize
@end quotation

@node it-edit spell check support,Thanks,Using it-edit spell check,Spell check
@anchor{Spell-check it-edit-spell-check-support}@anchor{35}
@section @code{it-edit} spell check support


@quotation

@code{it-edit} use the @code{gspell-1} library for providing spell check.


@subsubheading See also


@code{it-edit} and @code{gspell-1} library:

Actually the @code{gspell-1} library is relative young, so not available in every repository.

So where ever you get the spell check functionality into @code{it-edit} depends on what version

of @code{gtk-3} you get.

Because the @code{gspell-1} library is only available with @strong{>=} @code{gtk-+3.20}.

@*note: 
You can get gtk+-3.22 and gspell-1 currently with the @emph{ppa} @code{gnome3-staging} for debian packages or by debian distributions through the "sid" repository.


@code{gspell-1} has the advantages:


@itemize +

@item 
To be compatible with the gtksourceview-3 library contextual menu.

@item 
To provide a spell check dialog has widget.

@item 
To have a good language selection mechanism.
@end itemize



@subsubheading See also


@code{gspell-1} library

@example
gspell provides a flexible API to add spell checking to a GTK+ application. It
features:
* GObject wrappers around Enchant
* An inline spell checker for GtkTextView (enhanced version of GtkSpell)
* A spell checker dialog for GtkTextView
* Support of the no-spell-check tag defined by GtkSourceView
* Language choosers (button and dialog)
@end example

So we know that gspell is based on enchant:

@example
Enchant is a generic spell checking library which uses existing spell checker
engines such as ispell, aspell and myspell as its backends.

Enchant steps in to provide uniformity and conformity on top of these libraries,
and implement certain features that may be lacking in any individual provider
library.
@end example

So for getting dictionaries compatibles with the @code{gspell-1} library simply download either or:


@itemize +

@item 
aspell

@item 
ispell

@item 
myspell
@end itemize

dictionnaries in the wanted language(s).

@end quotation

@node Thanks,,it-edit spell check support,Spell check
@anchor{Spell-check thanks}@anchor{36}
@section Thanks


@quotation

Big Thanks to the author of the gpsell-1 library @strong{Sébastien Wilmet} which I get some form of familiarity within.

@*Sébastien Wilmet: 
is the author of the @code{Texilla} Latex editor and maintainer of the gtksourceview-3 library and participate in many other projects like @code{gedit}.

@end quotation

@node Sessions,Shortcuts table,Spell check,Top
@anchor{Sessions sessions}@anchor{37}@anchor{Sessions doc}@anchor{38}
@chapter Sessions


@menu
* Configure your sessions recovering:: 
* The automatic session mechanism:: 

@end menu

@node Configure your sessions recovering,The automatic session mechanism,,Sessions
@anchor{Sessions configure-your-sessions-recovering}@anchor{39}
@section Configure your sessions recovering


Their are 3 different modes for registering your session at your convenience.

@menu
* Files@comma{} documentation@comma{} applications registering;: Files documentation applications registering. 

@end menu

@node Files documentation applications registering,,,Configure your sessions recovering
@anchor{Sessions files-documentation-applications-registering}@anchor{3a}
@subsection Files, documentation, applications registering:



@itemize +

@item 
Asked for registering the current session at quitting.

@item 
Automatic registering.

@item 
Disable session registering.
@end itemize

@node The automatic session mechanism,,Configure your sessions recovering,Sessions
@anchor{Sessions the-automatic-session-mechanism}@anchor{3b}
@section The @strong{automatic} @code{session} mechanism


How does it work ?

@menu
* Registering;: Registering. 
* Reloading a session:: 
* Clear a session:: 

@end menu

@node Registering,Reloading a session,,The automatic session mechanism
@anchor{Sessions registering}@anchor{3c}
@subsection Registering:



@itemize +

@item 
Every time you open or close a file into the editor the registered files list is recomputed.

@*note: 
The path is registered.


@item 
Every time you launch a file through the File handler (@code{Ctrl + H}), the file is registered.

@*note: 
The URI is registered.


@item 
Every time you launch an application, the application is registered.

@*note: 
The application path is registered.


@item 
Nothing is erase if you don't clear the session Files ‣ Reload session ‣ Clear session.

@item 
If you reload something it's automatically stored again for next session.
@end itemize

@node Reloading a session,Clear a session,Registering,The automatic session mechanism
@anchor{Sessions reloading-a-session}@anchor{3d}
@subsection Reloading a session


You can reload the entire session by activating the menu item:

@quotation


@itemize +

@item 
Reload all last session

This will activate the reloading of the last registered:

@quotation


@itemize +

@item 
Files.

@item 
Documentation files.

@item 
Applications.
@end itemize
@end quotation
@end itemize
@end quotation

Or reload the different items singular.

@node Clear a session,,Reloading a session,The automatic session mechanism
@anchor{Sessions clear-a-session}@anchor{3e}
@subsection Clear a session


@*warning: 
To know that every @strong{non-empty} registered list can be relaunch at the next session or into the same session.


The only way to clear all the list is to activate the menu item Files ‣ Reload session ‣ Clear session.

Into a session.

This permit to clear the lists and

if you want to reconstruct a new session by reactivating the concern session registering mechanism.

@cartouche
@quotation Warning 
Application launching Note:

When you launch an application per the Actions ‣ Application launch it won't be registered as applications

because I consider that we need the application only now not very often.

But if you open an application per the menu items Applications where you can register your personal applications you use often.

They are are registered because you will use them often with the @code{it-edit} easy application access menus.
@end quotation
@end cartouche

@node Shortcuts table,Supported charset,Sessions,Top
@anchor{Shortcuts_memo id1}@anchor{3f}@anchor{Shortcuts_memo shortcuts-table}@anchor{a}@anchor{Shortcuts_memo doc}@anchor{40}
@chapter Shortcuts table


@menu
* Application shortcuts;: Application shortcuts. 
* Terminals shortcuts;: Terminals shortcuts. 

@end menu

@node Application shortcuts,Terminals shortcuts,,Shortcuts table
@anchor{Shortcuts_memo application-shortcuts}@anchor{41}
@section Application shortcuts:


@quotation


@multitable {xxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxx} 
@headitem

Shortcut

@tab

functionality

@tab

Mnemonic

@item

Ctrl + n

@tab

New file

@tab

n = new

@item

Ctrl + o

@tab

Open file

@tab

o = open

@item

Ctrl + s

@tab

Save file

@tab

s = save

@item

Ctrl + Shift + S

@tab

Save all files

@tab

S = Save

@item

Ctrl + Alt + c

@tab

Close file

@tab

C = Close

@item

Ctrl + Shift + c

@tab

Close all file(s)

@tab

C = Close

@item

Ctrl + r

@tab

Reload file

@tab

r = reload

@item

Ctrl + i

@tab

File informations

@tab

i = Informations

@item

Ctrl + z

@tab

Undo

@tab

None

@item

Ctrl + Shift + Z

@tab

Redo

@tab

None

@item

Ctrl + f

@tab

Search

@tab

f = find

@item

Ctrl + Enter

@tab

Replace

@tab

None

@item

Ctrl + Shift + Enter

@tab

Replace all

@tab

None

@item

Ctrl + +

@tab

Next

@tab

None

@item

Ctrl + -

@tab

Previous

@tab

None

@item

Ctrl + g

@tab

Go to line number

@tab

g = go to

@item

Ctrl + x

@tab

Cut

@tab

None

@item

Ctrl + c

@tab

Copy

@tab

c = copy

@item

Ctrl + v

@tab

Paste

@tab

None

@item

Ctrl + d

@tab

Duplicate text

@tab

d = duplicate

@item

Ctrl + p

@tab

Use tabs

@tab

None

@item

Ctrl + w

@tab

In-line spell-check

@tab

None

@item

Ctrl + Shift + W

@tab

Spell-check dialog

@tab

None

@item

Ctrl + e

@tab

Execute command

@tab

e = execute

@item

Ctrl + Alt + o

@tab

Order pages

@tab

o = order

@item

Ctrl + y

@tab

Copy file-path to clipboard

@tab

None

@item

Ctrl + Shift + y

@tab

Copy folder-path to clipboard

@tab

None

@item

Ctrl + b

@tab

Show|Hide big term

@tab

b = big term

@item

Ctrl + Shift + B

@tab

big term switch

@tab

B = Big term

@item

Ctrl + t

@tab

Show | Hide terminal

@tab

t = terminal

@item

Ctrl + Shift + T

@tab

Add new terminals

@tab

T = Terminals

@item

Shift + Copy

@tab

Copy from terminal

@tab

None

@item

Shift + Insert

@tab

Paste to terminal

@tab

None

@item

Ctrl + h

@tab

File handler

@tab

h = handler

@item

Ctrl + a

@tab

Application launcher

@tab

a = application

@item

Ctrl + q

@tab

Quit application

@tab

q = quit

@end multitable

@end quotation

@node Terminals shortcuts,,Application shortcuts,Shortcuts table
@anchor{Shortcuts_memo terminals-shortcuts}@anchor{42}
@section Terminals shortcuts:


@quotation


@multitable {xxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxx} 
@headitem

Shortcut

@tab

functionality

@tab

Mnemonic

@item

Shift + Copy (KP 1)

@tab

Copy from terminal

@tab

None

@item

Shift + Insert (KP 0)

@tab

Paste to terminal

@tab

None

@item

Shift + Ctrl + T

@tab

Open new tab

@tab

t = tab

@item

Shift + Ctrl + -

@tab

Decrease font-scale

@tab

- = decrease

@item

Shift + Ctrl + +

@tab

Increase font-scale

@tab

+ = increase

@end multitable


@*note: 
Else you can close a tab and reset the terminal from the terminals contextual menu.

@end quotation

@node Supported charset,Supported languages,Shortcuts table,Top
@anchor{charset supported-charset}@anchor{43}@anchor{charset doc}@anchor{44}
@chapter Supported charset


Unicode


@itemize *

@item 
UTF-8
@end itemize

---

Western


@itemize *

@item 
ISO-8859-1
@end itemize

---

Central European


@itemize *

@item 
ISO-8859-2
@end itemize

---

South European


@itemize *

@item 
ISO-8859-3
@end itemize

---

Baltic


@itemize *

@item 
ISO-8859-4
@end itemize

---

Cyrillic


@itemize *

@item 
ISO-8859-5
@end itemize

---

Arabic


@itemize *

@item 
ISO-8859-6
@end itemize

---

Greek


@itemize *

@item 
ISO-8859-7
@end itemize

---

Hebrew Visual


@itemize *

@item 
ISO-8859-8
@end itemize

---

Turkish


@itemize *

@item 
ISO-8859-9
@end itemize

---

Nordic


@itemize *

@item 
ISO-8859-10
@end itemize

---

Baltic


@itemize *

@item 
ISO-8859-13
@end itemize

---

Celtic


@itemize *

@item 
ISO-8859-14
@end itemize

---

Western


@itemize *

@item 
ISO-8859-15
@end itemize

---

Romanian


@itemize *

@item 
ISO-8859-16
@end itemize

---

Unicode


@itemize *

@item 
UTF-7
@end itemize

---

Unicode


@itemize *

@item 
UTF-16
@end itemize

---

Unicode


@itemize *

@item 
UTF-16BE
@end itemize

---

Unicode


@itemize *

@item 
UTF-16LE
@end itemize

---

Unicode


@itemize *

@item 
UTF-32
@end itemize

---

Unicode


@itemize *

@item 
UCS-2
@end itemize

---

Unicode


@itemize *

@item 
UCS-4
@end itemize

---

Armenian


@itemize *

@item 
ARMSCII-8
@end itemize

---

Chinese Traditional


@itemize *

@item 
BIG5
@end itemize

---

Chinese Traditional


@itemize *

@item 
BIG5-HKSCS
@end itemize

---

Cyrillic/Russian


@itemize *

@item 
CP866
@end itemize

---

Japanese


@itemize *

@item 
EUC-JP
@end itemize

---

Japanese


@itemize *

@item 
EUC-JP-MS
@end itemize

---

Japanese


@itemize *

@item 
CP932
@end itemize

---

Korean


@itemize *

@item 
EUC-KR
@end itemize

---

Chinese Traditional


@itemize *

@item 
EUC-TW
@end itemize

---

Chinese Simplified


@itemize *

@item 
GB18030
@end itemize

---

Chinese Simplified


@itemize *

@item 
GB2312
@end itemize

---

Chinese Simplified


@itemize *

@item 
GBK
@end itemize

---

Georgian


@itemize *

@item 
GEORGIAN-ACADEMY
@end itemize

---

Western


@itemize *

@item 
IBM850
@end itemize

---

Central European


@itemize *

@item 
IBM852
@end itemize

---

Cyrillic


@itemize *

@item 
IBM855
@end itemize

---

Turkish


@itemize *

@item 
IBM857
@end itemize

---

Hebrew


@itemize *

@item 
IBM862
@end itemize

---

Arabic


@itemize *

@item 
IBM864
@end itemize

---

Japanese


@itemize *

@item 
ISO-2022-JP
@end itemize

---

Korean


@itemize *

@item 
ISO-2022-KR
@end itemize

---

Cyrillic


@itemize *

@item 
ISO-IR-111
@end itemize

---

Korean


@itemize *

@item 
JOHAB
@end itemize

---

Cyrillic


@itemize *

@item 
KOI8R
@end itemize

---

Cyrillic


@itemize *

@item 
KOI8-R
@end itemize

---

Cyrillic/Ukrainian


@itemize *

@item 
KOI8U
@end itemize

---

Japanese


@itemize *

@item 
SHIFT_JIS
@end itemize

---

Vietnamese


@itemize *

@item 
TCVN
@end itemize

---

Thai


@itemize *

@item 
TIS-620
@end itemize

---

Korean


@itemize *

@item 
UHC
@end itemize

---

Vietnamese


@itemize *

@item 
VISCII
@end itemize

---

Central European


@itemize *

@item 
WINDOWS-1250
@end itemize

---

Cyrillic


@itemize *

@item 
WINDOWS-1251
@end itemize

---

Western


@itemize *

@item 
WINDOWS-1252
@end itemize

---

Greek


@itemize *

@item 
WINDOWS-1253
@end itemize

---

Turkish


@itemize *

@item 
WINDOWS-1254
@end itemize

---

Hebrew


@itemize *

@item 
WINDOWS-1255
@end itemize

---

Arabic


@itemize *

@item 
WINDOWS-1256
@end itemize

---

Baltic


@itemize *

@item 
WINDOWS-1257
@end itemize

---

Vietnamese


@itemize *

@item 
WINDOWS-1258
@end itemize

@node Supported languages,it-edit smart widgets,Supported charset,Top
@anchor{languages supported-languages}@anchor{45}@anchor{languages doc}@anchor{46}
@chapter Supported languages


ActionScript:

@quotation

text/x-actionscript


@itemize +

@item 
*.as
@end itemize
@end quotation

---

Ada:

@quotation

text/x-ada, text/x-adasrc


@itemize +

@item 
*.adb

@item 
*.ads
@end itemize
@end quotation

---

ANS-Forth94:

@quotation

text/x-forth


@itemize +

@item 
*.4th

@item 
*.forth
@end itemize
@end quotation

---

ASP:

@quotation

text/x-asp, application/x-asp, application/x-asap


@itemize +

@item 
*.asp
@end itemize
@end quotation

---

Automake:

@quotation


@itemize +

@item 
Makefile.am

@item 
GNUmakefile.am
@end itemize
@end quotation

---

awk:

@quotation

application/x-awk


@itemize +

@item 
*.awk
@end itemize
@end quotation

---

BennuGD:

@quotation


@itemize +

@item 
*.prg
@end itemize
@end quotation

---

BibTeX:

@quotation

text/x-bibtex


@itemize +

@item 
*.bib
@end itemize
@end quotation

---

Bluespec SystemVerilog:

@quotation


@itemize +

@item 
*.bsv
@end itemize
@end quotation

---

Boo:

@quotation

text/x-boo


@itemize +

@item 
*.boo
@end itemize
@end quotation

---

C:

@quotation

text/x-c, text/x-csrc, image/x-xpixmap


@itemize +

@item 
*.c
@end itemize
@end quotation

---

C#:

@quotation

text/x-csharpsrc, text/x-csharp


@itemize +

@item 
*.cs
@end itemize
@end quotation

---

C++:

@quotation

text/x-c++, text/x-cpp, text/x-c++src


@itemize +

@item 
*.cpp

@item 
*.cxx

@item 
*.cc

@item 
*.C

@item 
*.c++
@end itemize
@end quotation

---

CG Shader Language:

@quotation


@itemize +

@item 
*.cg
@end itemize
@end quotation

---

ChangeLog:

@quotation

text/x-changelog


@itemize +

@item 
ChangeLog*
@end itemize
@end quotation

---

C++ Header:

@quotation

text/x-c++hdr


@itemize +

@item 
*.hh

@item 
*.hp

@item 
*.hpp

@item 
*.h++
@end itemize
@end quotation

---

CMake:

@quotation


@itemize +

@item 
CMakeLists.txt

@item 
*.cmake

@item 
*.cmake.in

@item 
*.ctest

@item 
*.ctest.in
@end itemize
@end quotation

---

C/ObjC Header:

@quotation

text/x-chdr


@itemize +

@item 
*.h
@end itemize
@end quotation

---

COBOL:

@quotation


@itemize +

@item 
*.cbl

@item 
*.cob

@item 
*.cbd

@item 
*.cdb

@item 
*.cdc
@end itemize
@end quotation

---

CSS:

@quotation

text/css


@itemize +

@item 
*.css

@item 
*.CSSL
@end itemize
@end quotation

---

CSV:

@quotation

text/csv


@itemize +

@item 
*.csv
@end itemize
@end quotation

---

CUDA:

@quotation


@itemize +

@item 
*.cu

@item 
*.cuh
@end itemize
@end quotation

---

D:

@quotation

text/x-dsrc


@itemize +

@item 
*.d
@end itemize
@end quotation

---

Defaults:

.desktop:

@quotation

application/x-gnome-app-info, application/x-desktop


@itemize +

@item 
*.desktop

@item 
*.kdelnk
@end itemize
@end quotation

---

Diff:

@quotation

text/x-diff, text/x-patch, text/x-reject


@itemize +

@item 
*.diff

@item 
*.patch

@item 
*.rej
@end itemize
@end quotation

---

DocBook:

@quotation

application/docbook+xml


@itemize +

@item 
*.docbook
@end itemize
@end quotation

---

DOS Batch:

@quotation


@itemize +

@item 
*.bat

@item 
*.cmd

@item 
*.sys
@end itemize
@end quotation

---

DPatch:

@quotation

text/x-dpatch


@itemize +

@item 
*.dpatch
@end itemize
@end quotation

---

DTD:

@quotation

text/x-dtd


@itemize +

@item 
*.dtd
@end itemize
@end quotation

---

Eiffel:

@quotation

text/x-eiffel


@itemize +

@item 
*.e

@item 
*.eif
@end itemize
@end quotation

---

Erlang:

@quotation

text/x-erlang


@itemize +

@item 
*.erl

@item 
*.hrl
@end itemize
@end quotation

---

F#:

@quotation

text/x-fsharp


@itemize +

@item 
*.fs
@end itemize
@end quotation

---

FCL:

@quotation


@itemize +

@item 
*.fcl
@end itemize
@end quotation

---

Forth:

@quotation

text/x-forth


@itemize +

@item 
*.frt

@item 
*.fs
@end itemize
@end quotation

---

Fortran 95:

@quotation

text/x-fortran


@itemize +

@item 
*.f

@item 
*.f90

@item 
*.f95

@item 
*.for

@item 
*.F

@item 
*.F90
@end itemize
@end quotation

---

GAP:

@quotation

text/x-gap


@itemize +

@item 
*.g

@item 
*.gd

@item 
*.gi

@item 
*.gap
@end itemize
@end quotation

---

GDB Log:

@quotation


@itemize +

@item 
*.gdb
@end itemize
@end quotation

---

Genie:

@quotation

text/x-genie


@itemize +

@item 
*.gs
@end itemize
@end quotation

---

gettext translation:

@quotation

text/x-po, text/x-pot, text/x-pox, text/x-gettext-translation, text/x-gettext-translation-template


@itemize +

@item 
*.po

@item 
*.pot
@end itemize
@end quotation

---

Go:

@quotation


@itemize +

@item 
*.go
@end itemize
@end quotation

---

Graphviz Dot:

@quotation

text/vnd.graphviz


@itemize +

@item 
*.dot

@item 
*.gv
@end itemize
@end quotation

---

gtk-doc:

GtkRC:

@quotation

text/x-gtkrc


@itemize +

@item 
gtkrc

@item 
.gtkrc

@item 
gtkrc-*

@item 
.gtkrc-*
@end itemize
@end quotation

---

Haddock:

Haskell:

@quotation

text/x-haskell


@itemize +

@item 
*.hs
@end itemize
@end quotation

---

HTML:

@quotation

text/html


@itemize +

@item 
*.html

@item 
*.htm
@end itemize
@end quotation

---

IDL:

@quotation

text/x-idl


@itemize +

@item 
*.idl
@end itemize
@end quotation

---

IDL-Exelis:

@quotation


@itemize +

@item 
*.pro
@end itemize
@end quotation

---

ImageJ:

@quotation


@itemize +

@item 
*.ijm
@end itemize
@end quotation

---

.ini:

@quotation

text/x-ini-file, application/x-ini-file


@itemize +

@item 
*.ini
@end itemize
@end quotation

---

J:

@quotation


@itemize +

@item 
*.ijs
@end itemize
@end quotation

---

Jade:

@quotation


@itemize +

@item 
*.jade
@end itemize
@end quotation

---

Java:

@quotation

text/x-java


@itemize +

@item 
*.java
@end itemize
@end quotation

---

JavaScript:

@quotation

application/javascript, application/x-javascript, text/x-javascript, text/javascript, text/x-js


@itemize +

@item 
*.js

@item 
*.node
@end itemize
@end quotation

---

JSON:

@quotation

application/json


@itemize +

@item 
*.json

@item 
*.geojson

@item 
*.topojson
@end itemize
@end quotation

---

Julia:

@quotation


@itemize +

@item 
*.jl
@end itemize
@end quotation

---

LaTeX:

@quotation

text/x-tex


@itemize +

@item 
*.tex

@item 
*.ltx

@item 
*.sty

@item 
*.cls

@item 
*.dtx

@item 
*.ins

@item 
*.bbl
@end itemize
@end quotation

---

Lex:

@quotation


@itemize +

@item 
*.l

@item 
*.lex

@item 
*.flex
@end itemize
@end quotation

---

libtool:

@quotation

text/x-libtool


@itemize +

@item 
*.la

@item 
*.lai

@item 
*.lo
@end itemize
@end quotation

---

Literate Haskell:

@quotation

text/x-literate-haskell


@itemize +

@item 
*.lhs
@end itemize
@end quotation

---

LLVM IR:

@quotation


@itemize +

@item 
*.ll
@end itemize
@end quotation

---

Lua:

@quotation

text/x-lua


@itemize +

@item 
*.lua
@end itemize
@end quotation

---

m4:

@quotation

application/x-m4


@itemize +

@item 
*.m4

@item 
configure.ac

@item 
configure.in
@end itemize
@end quotation

---

Makefile:

@quotation

text/x-makefile


@itemize +

@item 
[Mm]akefile

@item 
GNUmakefile

@item 
*.make

@item 
*.mak

@item 
*.mk
@end itemize
@end quotation

---

Mallard:

@quotation


@itemize +

@item 
*.page
@end itemize
@end quotation

---

Markdown:

@quotation

text/x-markdown


@itemize +

@item 
*.markdown

@item 
*.md

@item 
*.mkd
@end itemize
@end quotation

---

Matlab:

@quotation

text/x-matlab


@itemize +

@item 
*.m
@end itemize
@end quotation

---

MediaWiki:

Meson:

@quotation

text/x-meson


@itemize +

@item 
meson.build

@item 
meson_options.txt
@end itemize
@end quotation

---

Modelica:

@quotation

text/x-modelica


@itemize +

@item 
*.mo

@item 
*.mop
@end itemize
@end quotation

---

MXML:

@quotation


@itemize +

@item 
*.mxml
@end itemize
@end quotation

---

Nemerle:

@quotation

text/x-nemerle


@itemize +

@item 
*.n
@end itemize
@end quotation

---

NetRexx:

@quotation

text/x-netrexx


@itemize +

@item 
*.nrx
@end itemize
@end quotation

---

NSIS:

@quotation


@itemize +

@item 
*.nsi

@item 
*.nsh
@end itemize
@end quotation

---

Objective-C:

@quotation

text/x-objcsrc


@itemize +

@item 
*.m
@end itemize
@end quotation

---

Objective-J:

@quotation

text/x-objective-j


@itemize +

@item 
*.j
@end itemize
@end quotation

---

OCaml:

@quotation

text/x-ocaml


@itemize +

@item 
*.ml

@item 
*.mli

@item 
*.mll

@item 
*.mly
@end itemize
@end quotation

---

OCL:

@quotation

text/x-ocl


@itemize +

@item 
*.ocl
@end itemize
@end quotation

---

Octave:

@quotation

text/x-octave


@itemize +

@item 
*.m
@end itemize
@end quotation

---

OOC:

@quotation


@itemize +

@item 
*.ooc
@end itemize
@end quotation

---

Opal:

@quotation


@itemize +

@item 
*.sign

@item 
*.impl
@end itemize
@end quotation

---

OpenCL:

@quotation


@itemize +

@item 
*.cl
@end itemize
@end quotation

---

OpenGL Shading Language:

@quotation


@itemize +

@item 
*.glslv

@item 
*.glslf
@end itemize
@end quotation

---

Pascal:

@quotation

text/x-pascal


@itemize +

@item 
*.p

@item 
*.pas
@end itemize
@end quotation

---

Perl:

@quotation

text/x-perl, application/x-perl


@itemize +

@item 
*.pl

@item 
*.pm

@item 
*.al

@item 
*.perl

@item 
*.t
@end itemize
@end quotation

---

PHP:

@quotation

text/x-php, application/x-php, text/x-php-source, application/x-php-source


@itemize +

@item 
*.php

@item 
*.php3

@item 
*.php4

@item 
*.phtml
@end itemize
@end quotation

---

Pig:

@quotation


@itemize +

@item 
*.pig
@end itemize
@end quotation

---

pkg-config:

@quotation

text/x-pkg-config


@itemize +

@item 
*.pc
@end itemize
@end quotation

---

Prolog:

@quotation

text/x-prolog


@itemize +

@item 
*.prolog
@end itemize
@end quotation

---

Protobuf:

@quotation

text/x-protobuf


@itemize +

@item 
*.proto
@end itemize
@end quotation

---

Puppet:

@quotation


@itemize +

@item 
*.pp
@end itemize
@end quotation

---

Python:

@quotation

text/x-python, application/x-python


@itemize +

@item 
*.py
@end itemize
@end quotation

---

Python 3:

@quotation


@itemize +

@item 
*.py3
@end itemize
@end quotation

---

R:

@quotation

text/x-R


@itemize +

@item 
*.R

@item 
*.Rout

@item 
*.r

@item 
*.Rhistory

@item 
*.Rt

@item 
*.Rout.save

@item 
*.Rout.fail
@end itemize
@end quotation

---

reStructuredText:

@quotation

text/x-rst


@itemize +

@item 
*.rst
@end itemize
@end quotation

---

RPM spec:

@quotation

text/x-rpm-spec


@itemize +

@item 
*.spec
@end itemize
@end quotation

---

Ruby:

@quotation

application/x-ruby, text/x-ruby


@itemize +

@item 
*.rb

@item 
*.rake

@item 
*.gemspec

@item 
Rakefile

@item 
Capfile

@item 
Gemfile
@end itemize
@end quotation

---

Rust:

@quotation

text/rust


@itemize +

@item 
*.rs
@end itemize
@end quotation

---

Scala:

@quotation

text/x-scala


@itemize +

@item 
*.scala
@end itemize
@end quotation

---

Scheme:

@quotation

text/x-scheme


@itemize +

@item 
*.scm
@end itemize
@end quotation

---

Scilab:

@quotation


@itemize +

@item 
*.sce

@item 
*.sci
@end itemize
@end quotation

---

sh:

@quotation

text/x-shellscript, application/x-shellscript, text/x-sh


@itemize +

@item 
*.sh

@item 
*bashrc

@item 
.profile

@item 
.bash_profile
@end itemize
@end quotation

---

SPARQL:

@quotation

application/sparql-query


@itemize +

@item 
*.rq
@end itemize
@end quotation

---

SQL:

@quotation

text/x-sql


@itemize +

@item 
*.sql
@end itemize
@end quotation

---

Standard ML:

@quotation


@itemize +

@item 
*.sml

@item 
*.sig
@end itemize
@end quotation

---

Sweave:

@quotation


@itemize +

@item 
*.rnw

@item 
*.Rnw

@item 
*.snw

@item 
*.Snw
@end itemize
@end quotation

---

SystemVerilog:

@quotation


@itemize +

@item 
*.sv

@item 
*.svh
@end itemize
@end quotation

---

Tcl:

@quotation

text/x-tcl, application/x-tcl


@itemize +

@item 
*.tcl

@item 
*.tk
@end itemize
@end quotation

---

Texinfo:

@quotation

text/x-texinfo


@itemize +

@item 
*.texi

@item 
*.texinfo
@end itemize
@end quotation

---

Thrift:

@quotation


@itemize +

@item 
*.thrift
@end itemize
@end quotation

---

txt2tags:

@quotation


@itemize +

@item 
*.t2t
@end itemize
@end quotation

---

Vala:

@quotation

text/x-vala


@itemize +

@item 
*.vala

@item 
*.vapi
@end itemize
@end quotation

---

VB.NET:

@quotation

text/x-vbnet, text/x-vb


@itemize +

@item 
*.vb
@end itemize
@end quotation

---

Verilog:

@quotation

text/x-verilog-src


@itemize +

@item 
*.v
@end itemize
@end quotation

---

VHDL:

@quotation

text/x-vhdl


@itemize +

@item 
*.vhd
@end itemize
@end quotation

---

XML:

@quotation

application/xml, text/xml


@itemize +

@item 
*.xml

@item 
*.xspf

@item 
*.siv

@item 
*.smil

@item 
*.smi

@item 
*.sml

@item 
*.kino

@item 
*.xul

@item 
*.xbel

@item 
*.abw

@item 
*.zabw

@item 
*.glade

@item 
*.jnlp

@item 
*.xhtml

@item 
*.svg

@item 
*.mml

@item 
*.rdf

@item 
*.rss

@item 
*.wml

@item 
*.xmi

@item 
*.fo

@item 
*.xslfo
@end itemize
@end quotation

---

XSLT:

@quotation

application/xslt+xml


@itemize +

@item 
*.xslt

@item 
*.xsl
@end itemize
@end quotation

---

Yacc:

@quotation

text/x-yacc, text/x-bison


@itemize +

@item 
*.y

@item 
*.yacc
@end itemize
@end quotation

---

YAML:

@quotation

application/x-yaml


@itemize +

@item 
*.yaml

@item 
*.yml
@end itemize
@end quotation

@node it-edit smart widgets,Indices and tables,Supported languages,Top
@anchor{it-edit_widgets it-edit-smart-widgets}@anchor{47}@anchor{it-edit_widgets doc}@anchor{48}
@chapter it-edit smart widgets


@code{it-edit} implement some few self build widget:

@cartouche
@quotation Note 
If you get interest into Gtk-3 widget building

you can broad the source to understand How-To build GtkWidget(s) for Gtk-3 from your own.
@end quotation
@end cartouche

@menu
* GtkSmartMenuItem:: 
* GtkSmartIconButton:: 
* GtkItTerm:: 

@end menu

@node GtkSmartMenuItem,GtkSmartIconButton,,it-edit smart widgets
@anchor{it-edit_widgets gtksmartmenuitem}@anchor{49}
@section GtkSmartMenuItem


A simple menu item containing:


@itemize +

@item 
An icon.

@item 
A label.

@item 
An universal shortcut text.
@end itemize

@menu
* Constructors:: 
* Getters:: 

@end menu

@node Constructors,Getters,,GtkSmartMenuItem
@anchor{it-edit_widgets constructors}@anchor{4a}
@subsection Constructors



@deffn {C Function} GtkWidget* gtk_smart_menu_item_new_all(const gchar *label, const gchar *icon_filepath, GtkAccelGroup *accel_group, const GdkModifierType accel_modifier, const guint accel_key) ;

@*Parameters: 

@itemize *

@item 
@code{label} (@code{const gchar *}) -- The label to display into the menu item.

@item 
@code{icon_filepath} (@code{const gchar *}) -- The menu item icon file-path.

@item 
@code{accel_group} (@code{GtkAccelGroup *}) -- The shortcut accelerator group.

@item 
@code{accel_modifier} (@code{const GdkModifierType}) -- The shortcut modifier.

@item 
@code{accel_key} (@code{const guint}) -- The shortcut accelerator key.
@end itemize


@*Return type: 
@code{GtkWidget *}


@*Returns: 
A pointer to the @code{GtkSmartMenuItem}.

@end deffn


@deffn {C Function} GtkWidget* gtk_smart_check_menu_item_new_all(const gchar *label, const gboolean draw_as_radio, const gchar *icon_filepath, GtkAccelGroup *accel_group, const GdkModifierType accel_modifier, const guint accel_key) ;

@*Parameters: 

@itemize *

@item 
@code{label} (@code{const gchar *}) -- The label to display into the menu item.

@item 
@code{draw_as_radio} (@code{const gboolean}) -- draw_as_radio

@item 
@code{icon_filepath} (@code{const gchar *}) -- The menu item icon file-path.

@item 
@code{accel_group} (@code{GtkAccelGroup *}) -- The shortcut accelerator group.

@item 
@code{accel_modifier} (@code{const GdkModifierType}) -- The shortcut modifier.

@item 
@code{accel_key} (@code{const guint}) -- The shortcut accelerator key.
@end itemize


@*Return type: 
@code{GtkWidget *}


@*Returns: 
A pointer to the @code{GtkSmartMenuItem} check button.

@end deffn

@cartouche
@quotation Note 
You can pass a @code{NULL} pointer or @code{0} to the parameters :


@itemize *

@item 
icon_filepath

@item 
accel_group

@item 
accel_modifier

@item 
accel_key.
@end itemize
@end quotation
@end cartouche

@*note: 
You can build others constructors if you have understand How-To build this kind of widgets.


@node Getters,,Constructors,GtkSmartMenuItem
@anchor{it-edit_widgets getters}@anchor{4b}
@subsection Getters



@deffn {C Function} GtkWidget* gtk_smart_menu_item_get_image(GtkWidget *smart_menu_item) ;

@*Parameters: 

@itemize *

@item 
@code{smart_menu_item} (@code{GtkWidget *}) -- The return value from the constructors.
@end itemize


@*Return type: 
@code{GtkWidget *}


@*Returns: 
A pointer to the @code{GtkImage} widget.

@end deffn


@deffn {C Function} GtkWidget* gtk_smart_menu_item_get_menuitem(GtkWidget *smart_menu_item) ;

@*Parameters: 

@itemize *

@item 
@code{smart_menu_item} (@code{GtkWidget *}) -- The return value from the constructors.
@end itemize


@*Return type: 
@code{GtkWidget *}


@*Returns: 
A pointer to the @code{GtkMenuItem} widget.

@end deffn


@deffn {C Function} GtkWidget* gtk_smart_menu_item_get_label(GtkWidget *smart_menu_item) ;

@*Parameters: 

@itemize *

@item 
@code{smart_menu_item} (@code{GtkWidget *}) -- The return value from the constructors.
@end itemize


@*Return type: 
@code{GtkWidget *}


@*Returns: 
A pointer to the @code{GtkLabel} widget.

@end deffn


@deffn {C Function} GtkWidget* gtk_smart_menu_item_get_accel_label(GtkWidget *smart_menu_item) ;

@*Parameters: 

@itemize *

@item 
@code{smart_menu_item} (@code{GtkWidget *}) -- The return value from the constructors.
@end itemize


@*Return type: 
@code{GtkWidget *}


@*Returns: 
A pointer to the @code{GtkAccelLabel} widget.

@end deffn

@node GtkSmartIconButton,GtkItTerm,GtkSmartMenuItem,it-edit smart widgets
@anchor{it-edit_widgets gtksmarticonbutton}@anchor{4c}
@section GtkSmartIconButton


A simple button with an icon without label and tool-tip which embed an universal short-cut text.

@menu
* Constructors: Constructors<2>. 
* Getters: Getters<2>. 

@end menu

@node Constructors<2>,Getters<2>,,GtkSmartIconButton
@anchor{it-edit_widgets id1}@anchor{4d}
@subsection Constructors



@deffn {C Function} GtkWidget* gtk_smart_icon_button_new_all(const gchar *filepath, const gchar *tooltip_text, const guint accel_key, const GdkModifierType accel_modifier) ;

@*Parameters: 

@itemize *

@item 
@code{filepath} (@code{const gchar *}) -- The filepath to the image to use as icon.

@item 
@code{tooltip_text} (@code{const gchar *}) -- The tool-tip text without the accelerator label.

@item 
@code{accel_key} (@code{const guint}) -- The shortcut accelerator key.

@item 
@code{accel_modifier} (@code{const GdkModifierType}) -- The shortcut modifier.
@end itemize


@*Return type: 
@code{GtkWidget *}


@*Returns: 
A pointer to the @code{GtkSmartIconButton} widget.

@end deffn


@deffn {C Function} GtkWidget* gtk_smart_icon_toggle_button_new_all(const gchar *filepath, const gchar *tooltip_text, const guint accel_key, const GdkModifierType accel_modifier) ;

@*Parameters: 

@itemize *

@item 
@code{filepath} (@code{const gchar *}) -- The filepath to the image to use as icon.

@item 
@code{tooltip_text} (@code{const gchar *}) -- The tool-tip text without the accelerator label.

@item 
@code{accel_key} (@code{const guint}) -- The shortcut accelerator key.

@item 
@code{accel_modifier} (@code{const GdkModifierType}) -- The shortcut modifier.
@end itemize


@*Return type: 
@code{GtkWidget *}


@*Returns: 
A pointer to the @code{GtkSmartIconButton} toggle button widget.

@end deffn

@node Getters<2>,,Constructors<2>,GtkSmartIconButton
@anchor{it-edit_widgets id2}@anchor{4e}
@subsection Getters



@deffn {C Function} GtkWidget* gtk_smart_icon_button_get_image(GtkWidget *smart_icon_button) ;

@*Parameters: 

@itemize *

@item 
@code{smart_icon_button} (@code{GtkWidget *}) -- The return value from the constructor of a @code{GtkSmartIconButton}.
@end itemize


@*Return type: 
@code{GtkWidget *}


@*Returns: 
A pointer to the @code{GtkImage} widget.

@end deffn

@node GtkItTerm,,GtkSmartIconButton,it-edit smart widgets
@anchor{it-edit_widgets gtkitterm}@anchor{4f}
@section GtkItTerm


Not reusable like this.

@cartouche
@quotation Note 
I've learned how to implement self builded Gtk-3 widgets

If you get interest in building widgets take a look at the source for basics.
@end quotation
@end cartouche

@node Indices and tables,,it-edit smart widgets,Top
@anchor{index indices-and-tables}@anchor{50}
@unnumbered Indices and tables



@itemize *

@item 
genindex

@item 
modindex

@item 
search
@end itemize

@c %**end of body
@bye
